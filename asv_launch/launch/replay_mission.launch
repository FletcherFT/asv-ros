<?xml version="1.0"?>
<launch>
<!-- need to replay: 
tf, 
tf_static, 
odometry/filtered, 
energy aggregate, 
energy adc_raw,
energy power,
failsafe/inrange,
guidance operator,
mission plan,
-->
<arg name="bag_path" default="/home/fft/Dropbox/PhD/Experiments/ASV_Experiments/Waverley_Trials/Tuesday_13_11_18/midsize_final_7_2018-11-13-16-25-39_0.bag"/>
<arg name="bag_output" default="/home/fft/Dropbox/PhD/Experiments/ASV_Experiments/Waverley_Trials/Reconstructions/Redone_midsize_final_7_2018-11-13-16-25-39_0"/>
<arg name="SIL" value="true"/>
<arg name="viz" default="true"/>
<arg name="sup_param" default="$(find asv_mission)/params/supervisor.yaml"/>

<!-- need to make a node that triggers supervisor/start at time=1542086798.223 s-->
<param name="use_sim_time" value="true"/>
<!-- bringup the hmi -->
<node if="$(arg viz)" pkg="rviz" type="rviz" name="rviz" args="-d /home/fft/ROS_ws/src/asv_framework/asv_launch/rviz/mission.rviz">
		<remap from="move_base_simple/goal" to="guidance/operator"/>
		<remap from="initialpose" to="set_pose"/>
</node>
<!-- launch-prefix="xterm -e" -->
<node pkg="rosbag" type="play" name="replay_node" args="/asv/status:=/test/status $(arg bag_path) -r 5 --clock --pause --topics /asv/status /ublox_gps/filtered /tf /tf_static /odometry/filtered /energy/adc_raw /energy/battery /failsafe/in_range /guidance/operator /mission/plan" output="screen"  required="True"/>
<node pkg="rosbag" type="record" name="record_node" args="-O $(arg bag_output) -a -x /test/status"/>
<!-- we need to run the following nodes so that the supervisor has no service errors -->
<node name="supervisor_start_service_caller" type="supervisor_start_sync.py" pkg="asv_launch" output="screen"/>
<!-- bringup the guidance node -->
<node pkg="asv_guidance" type="guidance.py" name="guidance_node"/>

<!-- bringup the hardware level nodes -->
<rosparam command="load" file="$(find asv_control)/params/thrustersAP.yaml"/>
<rosparam command="load" file="$(find asv_control)/params/thrustersDP.yaml"/>
<rosparam command="load" file="$(find asv_control)/params/motor_config.yaml"/>
<node pkg="asv_control" type="ardudriver.py" name="ardudriver">
    <param name="test" value="$(arg SIL)"/>
</node>
<node pkg="asv_control" type="constrained_fixed_allocation.py" name="allocator"/>
<node pkg="topic_tools" type="mux" name="control_topic_mux" args="tau_com/out tau_com/override tau_com/AP tau_com/DP">
    <remap from="mux" to="control_topic_mux"/>
</node>
<!-- bringup the low level control nodes -->
<node pkg="asv_control" type="controlmanager.py" name="controlmanager">
    <remap from="mux/select" to="control_topic_mux/selected"/>
</node>
<node pkg="asv_control" type="autopilot.py" name="autopilot">
    <remap from="pose_com" to="guidance/setpoint"/>
    <rosparam command="load" file="$(find asv_control)/params/ap_pid_settings.yaml"/>
</node>
<node pkg="asv_control" type="dynamic_positioning.py" name="dynamic_position">
    <remap from="pose_com" to="guidance/setpoint"/>
    <rosparam command="load" file="$(find asv_control)/params/dp_pid_settings.yaml"/>
</node>
<rosparam command="load" file="$(find asv_mission)/params/supervisor.yaml"/>
<node pkg="asv_mission" type="supervisor.py" name="supervisor" output="screen"/>
<node pkg="asv_energy" type="energy_monitor.py" name="energy_monitor"/>

</launch>